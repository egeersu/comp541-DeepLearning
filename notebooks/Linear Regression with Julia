{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Name: Ege Ersü\n",
    "# Student ID: 59741"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Regression on Housing Data\n",
    "In the first lab assignment, you played with Boston Housing Dataset. In this lab assignment, you are going to implement a linear regression model trained on Boston Housing Data by using Knet for the first time. We will take advantage of iterators, callable objects and automatic differentation mechanism."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "┌ Info: Recompiling stale cache file /mnt/juliabox/.julia/compiled/v1.0/Plots/ld3vC.ji for Plots [91a5bcdd-55d7-5caf-9e0b-520d859cae80]\n",
      "└ @ Base loading.jl:1190\n",
      "┌ Warning: Package Plots does not have REPL in its dependencies:\n",
      "│ - If you have Plots checked out for development and have\n",
      "│   added REPL as a dependency but haven't updated your primary\n",
      "│   environment's manifest file, try `Pkg.resolve()`.\n",
      "│ - Otherwise you may need to report an issue with Plots\n",
      "└ Loading REPL into Plots from project dependency, future warnings for Plots are suppressed.\n"
     ]
    }
   ],
   "source": [
    "# Necessary imports\n",
    "using Pkg; for p in (\"Knet\",\"AutoGrad\",\"Plots\",\"Images\",\"ImageMagick\"); haskey(Pkg.installed(),p) || Pkg.add(p); end\n",
    "using Knet\n",
    "using Statistics\n",
    "using Random\n",
    "import Base: length, size, iterate, eltype, IteratorSize, IteratorEltype, haslength, @propagate_inbounds, repeat, rand, tail\n",
    "import .Iterators: cycle, Cycle, take, repeat\n",
    "\n",
    "using Plots; default(fmt=:png,ls=:auto)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Reading\n",
    "You do not need to worry about data reading and preprocessing: We are going to take advantage of housing data reader which is also a part of Knet. We include some source file and then use ```housing``` function. ```housing``` function takes one input argument: the percentage of the test set to split dataset into two parts. Just take a look at the cell below. In this lab session, we are going to use 20% of the data as test split."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([-0.410443 -0.113706 … -0.328758 -0.415011; -0.48724 -0.48724 … 0.370303 2.94293; … ; 0.37599 -0.068175 … 0.300082 0.440616; 0.185818 -0.00182931 … 0.299246 -0.337914], [26.4 16.1 … 30.7 19.4], [-0.40099 -0.416566 … -0.403706 -0.405478; 0.456057 -0.48724 … -0.48724 1.44223; … ; 0.197557 0.417723 … 0.440616 0.286609; -0.438739 -0.293103 … 0.446283 -1.13331], [24.5 18.5 … 20.3 29.8])"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "include(joinpath(Knet.dir(), \"data\", \"housing.jl\"))\n",
    "Knet.seed!(1)\n",
    "xtrn, ytrn, xtst, ytst = housing(0.20; url=\"https://raw.githubusercontent.com/ilkerkesen/ufldl-tutorial/master/ex1/housing.data\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((13, 405), (1, 405), (13, 101), (1, 101))"
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "size(xtrn), size(ytrn), size(xtst), size(ytst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Minibatching via Iterators\n",
    "In this part, you are going implement a minibatching procedure (or let's call it pipeline). Remember, you need to implement your own ```minibatch``` function, it's forbidden to use Knet's ```minibatch``` procedure. Also, your minibatching scheme must use iterators. Just take a look at [this blog post](https://julialang.org/blog/2018/07/iterators-in-julia-0.7). To implement your minibatching pipeline, we provide you ```HousingData``` struct definition. Different from the original implementation, you are not going to discard the last remaining smaller minibatch, you will use all the instances. Also, remember that, ```HousingData``` structure is not mutable which means you are not able to change the values inside struct."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [],
   "source": [
    "# DO NOT TOUCH THIS CELL\n",
    "struct HousingDataMinibatch\n",
    "    x\n",
    "    y\n",
    "    batchsize\n",
    "    shuffle # shuffle data in each epoch or not\n",
    "    ninstances # number of instances\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "HousingDataMinibatch"
      ]
     },
     "execution_count": 326,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This function constructs a HousingData object\n",
    "function HousingDataMinibatch(x, y; batchsize=100, dtype=Array{Float64}, shuffle=false)\n",
    "    # start your answer\n",
    "    hd = HousingDataMinibatch(x, y, batchsize, shuffle, size(x)[2])\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "length (generic function with 151 methods)"
      ]
     },
     "execution_count": 325,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Returns how many batches the dataset has (hint: you can use divrem function)\n",
    "function length(d::HousingDataMinibatch)\n",
    "    size(d.x)[1]\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "rand (generic function with 70 methods)"
      ]
     },
     "execution_count": 324,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Returns a random minibatch (hint: you can use randperm function)\n",
    "function rand(d::HousingDataMinibatch)\n",
    "    # start your answer\n",
    "    #Shuffles random from 1 to ninstances\n",
    "    indx = randperm(d.ninstances)[1:d.batchsize]\n",
    "    x = d.x[:,indx]\n",
    "    y = d.y[:,indx]\n",
    "    #x = d.x[:, 1:indx]\n",
    "    #y = d.y[:, 1:indx]\n",
    "    # end your answer\n",
    "    return (x, y)\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "iterate (generic function with 277 methods)"
      ]
     },
     "execution_count": 316,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This is how you implement your own iterator!\n",
    "#function iterate(d::HousingDataMinibatch, state=ifelse(d.shuffle, randperm(d.ninstances), 1:d.ninstances))\n",
    "\n",
    "function iterate(d::HousingDataMinibatch, state=ifelse(d.shuffle, randperm(d.ninstances), 1:d.batchsize))\n",
    "    \n",
    "    if state == \"done\"\n",
    "        return nothing\n",
    "    end\n",
    "    \n",
    "    if d.shuffle == false\n",
    "\n",
    "        if state[1] + d.batchsize > d.ninstances\n",
    "            x_batch = d.x[:,(state[1]:d.ninstances)]\n",
    "            y_batch = d.y[:,(state[1]:d.ninstances)]\n",
    "            return (x_batch, y_batch), \"done\"\n",
    "            return nothing\n",
    "        end\n",
    "\n",
    "        x_batch = d.x[:, state]\n",
    "        y_batch = d.y[:, state]\n",
    "\n",
    "        state = (state[1]+d.batchsize) : (state[1]+ (2*d.batchsize)-1)\n",
    "\n",
    "        return (x_batch, y_batch), state\n",
    "    end\n",
    "    \n",
    "    \n",
    "    if d.shuffle == true\n",
    "        \n",
    "        if size(state)[1] < d.batchsize\n",
    "            x_batch = d.x[:, state[1:size(state)[1]]]\n",
    "            y_batch = d.y[:, state[1:size(state)[1]]]\n",
    "            return (x_batch, y_batch), \"done\"\n",
    "        end\n",
    "\n",
    "        x_batch = d.x[:, state[1:d.batchsize]]\n",
    "        y_batch = d.y[:, state[1:d.batchsize]]\n",
    "                \n",
    "        state = state[d.batchsize+1:size(state)[1]]\n",
    "                return (x_batch, y_batch), state\n",
    "        \n",
    "    end\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "HousingDataMinibatch([-0.40099 -0.416566 … -0.403706 -0.405478; 0.456057 -0.48724 … -0.48724 1.44223; … ; 0.197557 0.417723 … 0.440616 0.286609; -0.438739 -0.293103 … 0.446283 -1.13331], [24.5 18.5 … 20.3 29.8], 100, false, 101)"
      ]
     },
     "execution_count": 317,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtrn = HousingDataMinibatch(xtrn, ytrn; shuffle=true)\n",
    "dtst = HousingDataMinibatch(xtst, ytst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(13, 100), (1, 100)\n",
      "(13, 100), (1, 100)\n",
      "(13, 100), (1, 100)\n",
      "(13, 100), (1, 100)\n",
      "(13, 5), (1, 5)\n"
     ]
    }
   ],
   "source": [
    "# just testing\n",
    "for (x, y) in dtrn\n",
    "    println(size(x), \", \", size(y))\n",
    "end\n",
    "\n",
    "# needs to have the following output\n",
    "# (13, 100), (1, 100)\n",
    "# (13, 100), (1, 100)\n",
    "# (13, 100), (1, 100)\n",
    "# (13, 100), (1, 100)\n",
    "# (13, 5), (1, 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Implementation via Callable Objects\n",
    "Next, we are going to implement our model via callable objects. In Julia, we can call objects. Just give a glimpse at the following code snippet:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, World!\n",
      "Hello, Jupiter!\n"
     ]
    }
   ],
   "source": [
    "struct Hello\n",
    "    planet\n",
    "    Hello(planet=\"World\") = new(planet)\n",
    "end\n",
    "\n",
    "(obj::Hello)() = println(\"Hello, $(obj.planet)!\")\n",
    "\n",
    "hello_world = Hello()\n",
    "hello_world()\n",
    "\n",
    "hello_jupiter = Hello(\"Jupiter\")\n",
    "hello_jupiter()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this assingment, you just need to define a linear layer and that's all! Write your solutions to the below cell. Hint: You need to use ```Param``` method of AutoGrad. Just type ```@doc Param``` to see the documentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Linear1(P(Array{Float64,2}(1,13)), P(Array{Float64,1}(1)))"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "struct Linear1; w; b; end\n",
    "\n",
    "Linear1(xsize::Int, ysize::Int, atype=Array{Float64}, scale=0.1)=\n",
    "    Linear1(Param(scale*randn(1,13)), Param(zeros(1)))\n",
    "\n",
    "(l::Linear1)(x) = (l.w * x) .+ l.b\n",
    "\n",
    "model = Linear1(1,13)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define Loss Function\n",
    "In this part, we'll define our loss function. We are going to use minimum squared error loss function,\n",
    "\n",
    "![MSE](http://web.itu.edu.tr/keseni/mse.png)\n",
    "\n",
    "We're going to define three diffent functions for this purpose,\n",
    "\n",
    "1. A function takes predictions and gold values as input.\n",
    "2. A callable object procedure that takes input/output pair as input\n",
    "3. A callable object procedure that takes our dataset object as input\n",
    "\n",
    "See function prototypes below and the documentation of ```train!``` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse(model(xtrn), ytrn) = 295.7437337692845\n",
      "model(xtrn, ytrn) = 295.7437337692845\n",
      "model(dtrn) = 275.556436549272\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "275.556436549272"
      ]
     },
     "execution_count": 321,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 1 - takes predictions and gold values as input.\n",
    "function mse(ypred, ygold)\n",
    "    N = size(ypred)[2]\n",
    "    sub = (x->x*x).(ygold - ypred)\n",
    "    loss = sum(sub)/(2*N)\n",
    "    loss\n",
    "end\n",
    "\n",
    "\n",
    "# 2 - callable object procedure that takes input/output pair as input\n",
    "function (m::Linear1)(x, y)\n",
    "    mse(m(x), y)\n",
    "end\n",
    "\n",
    "\n",
    "# 3 - callable object procedure that takes our dataset object as input\n",
    "function (m::Linear1)(data::HousingDataMinibatch)\n",
    "    mean(m(x,y) for (x,y) in data)\n",
    "end\n",
    "\n",
    "model = Linear1(1,13)\n",
    "\n",
    "@show mse(model(xtrn), ytrn)\n",
    "@show model(xtrn,ytrn)\n",
    "@show model(dtrn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training with Modular Interface and Iterators\n",
    "Now, let's implement a ```mytrain!``` procedure to train our network! It takes model, train data, test data, report period (in iterations) and number of maximum iterations. It trains our model until a certain maximum iterations number, records loss values of train and test data splits after each report period. It should output three lists: iterations numbers, loss values of train set, loss values of test set.\n",
    "\n",
    "Hint: You will need ```sgd!```, ```cycle``` and ```take``` procedures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mytrain! (generic function with 3 methods)"
      ]
     },
     "execution_count": 341,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function pusher(m::Linear1,dtrn,dtst,trnloss,tstloss)\n",
    "    push!(trnloss, m(dtrn))\n",
    "    push!(tstloss, m(dtst))\n",
    "end\n",
    "    \n",
    "function mytrain!(m::Linear1, dtrn, dtst, valid=10, max_iters=500)\n",
    "    trnloss = []\n",
    "    tstloss = []\n",
    "    \n",
    "    takeevery(n,itr) = (x for (i,x) in enumerate(itr) if i % n == 1)                           \n",
    "    \n",
    "    a = sgd(m, take(cycle(dtrn), max_iters+1))\n",
    "    b = (pusher(m,dtrn,dtst,trnloss,tstloss) for x in takeevery(valid, a))\n",
    "     \n",
    "    progress!(b)    \n",
    "                \n",
    "    return 0:valid:max_iters, trnloss, tstloss\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, let's train our network and plot the results,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "┣  /       /       /       /       /       /       /      ┫ 51 [00:00, 479.15i/s]\n"
     ]
    },
    {
     "data": {
      "image/png": ""
     },
     "execution_count": 342,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Knet.seed!(42)\n",
    "model = Linear1(13, 1)\n",
    "dtrn = HousingDataMinibatch(xtrn, ytrn; shuffle=true)\n",
    "dtst = HousingDataMinibatch(xtst, ytst)\n",
    "iters, trnloss, tstloss = mytrain!(model, dtrn, dtst)\n",
    "plot(iters, [trnloss, tstloss], labels=[:trn, :tst], xlabel=\"iterations\", ylabel=\"loss\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.0.3 (4 threads)",
   "language": "julia",
   "name": "julia-1.0k"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.0.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
